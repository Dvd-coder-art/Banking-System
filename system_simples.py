import datetime

usuarios = {}
usuarios_contas = {}

class ContaBancaria:

  #Fun√ß√£o para inserir usuario.
  def __init__(self, titular):
    self.titular = titular
    self.saldo=0
    self.transacoes = []
    self.limite_transacoes = 10
    self.data_atual = datetime.datetime.now().strftime("%d/%m/%Y %H:%M:%S")

  #Fun√ß√£o de dep√≥sito.
  def depositar(self,valor):
    if len(self.transacoes)<self.limite_transacoes:
      self.saldo+=valor
      self.transacoes.append(f"Deposito + R${valor:.2f} {self._hora_atual()}")
    else:  
      print(f"Limite de transa√ß√µes atingido. N√£o √© poss√≠vel adicionar mais transa√ß√µes.{self._hora_atual()}")
    
    
  #Fun√ß√£o de saque.  
  def sacar(self,valor):
    if len(self.transacoes)<self.limite_transacoes:
      if(valor<=self.saldo):
        self.saldo-=valor
        self.transacoes.append(f"Saque - R${valor:.2f} {self._hora_atual()}")
      else:
        print("Voc√™ n√£o possue saldo suficiente.")
    else:
      print(f"Limite de transa√ß√µes atingido. N√£o √© poss√≠vel adicionar mais transa√ß√µes.{self._hora_atual()}")
    
  #Fun√ß√£o de extrato.  
  def extrato(self):
      print(f"\nExtrato de {self.titular}:")
      for t in self.transacoes:
       print(t)
      print(f"\nSaldo atual: R${self.saldo:.2f}")

  def _hora_atual(self):
    return datetime.datetime.now().strftime("%d/%m/%Y %H:%M:%S")

# Dados do usu√°rio
class Pessoa:
  def __init__(self):
      self.nome = input("Digite o nome do titular da conta: ")
      self.data_nascimento = input("Digite a data de nascimento do titular da conta: ")
      self.cpf = input("Digite o CPF do titular da conta: ")
      self.conta = []

  def __str__(self):
     return f"üë§ Titular: {self.nome}, üóìÔ∏è Nascimento: {self.data_nascimento}, üÜî CPF: {self.cpf}"

# Dados da conta
class Conta:
  def __init__(self):
    self.agencia = input("Digite a ag√™ncia: ")
    self.numero = input("Digite o n√∫mero da conta: ")

  def __str__(self):
    return f"üè¶ Ag√™ncia: {self.agencia}, üìÑ Conta: {self.numero}"

# Dados do endere√ßo
class Endereco:
  def __init__(self):
    self.logradouro = input("Digite o logradouro: ")
    self.numero = input("Digite o n√∫mero: ")
    self.bairro = input("Digite o bairro: ")
    self.cidade = input("Digite a cidade: ")
    self.estado = input("Digite o estado: ")

  def __str__(self):
    return f"Endere√ßo: {self.logradouro}, {self.numero}, {self.bairro}, {self.cidade}, {self.estado}"



# Fun√ß√£o de cadastro de usu√°rio
def cadastrar_usuario():
     # Cria√ß√£o do objeto Pessoa, que agora pede os dados diretamente
    pessoa = Pessoa()

    if pessoa.cpf in usuarios:
        print("‚ö†Ô∏è Usu√°rio j√° cadastrado com este CPF!")
        return

    # Armazenando o usu√°rio no dicion√°rio com o CPF como chave
    usuarios[pessoa.cpf] = pessoa
    print(f"‚úÖ Usu√°rio {pessoa.nome} cadastrado com sucesso!")

# Fun√ß√£o de cadastro de conta
def cadastrar_conta():
# Fun√ß√£o de cadastro de conta
  conta = Conta()

  cpf = input("Digite o CPF do titular da conta para associar: ")
  if cpf not in usuarios:
    print("‚ö†Ô∏è Usu√°rio n√£o encontrado com esse CPF!")
    return

  if conta.numero in usuarios_contas:
     print("‚ö†Ô∏è Conta j√° cadastrada!")
     return
  
  if cpf in usuarios_contas:
    usuarios_contas[cpf].append(conta)

  usuarios_contas[conta.numero] = conta
  print(f"‚úÖ Conta {conta.numero} cadastrada com sucesso!")

# Fun√ß√£o de sele√ß√£o de usu√°rio
def selecionar_usuario():
    cpf = input("Digite o CPF do usu√°rio: ")
    if cpf not in usuarios:
        print("‚ö†Ô∏è Usu√°rio n√£o encontrado!")
        return None
    return usuarios[cpf]

# Fun√ß√£o de listar usu√°rios
def listar_usuarios():
    if not usuarios:
        print("üì≠ Nenhum usu√°rio cadastrado.")
        return
    
    print("\nüìú Usu√°rios cadastrados:")
    for cpf, pessoa in usuarios.items():
        print(pessoa)

# Fun√ß√£o de sele√ß√£o de conta
def selecionar_conta():
    numero = input("Digite o n√∫mero do conta: ")
    conta = usuarios_contas.get(numero)
    if conta is None:
        print("‚ö†Ô∏è Conta n√£o encontrado!")
        return None
    return conta

# Fun√ß√£o de listar contas
def listar_contas():
    if not usuarios_contas:
        print("üì≠ Nenhuma conta cadastrada.")
        return
    
    print("\nüìú Contas cadastrados:")
    for agencia, numero in usuarios_contas.items():
        print(numero)

# Fun√ß√£o principal
def main():
    while True:
        print("\n=== üè¶ MENU ===")
        print("1 - Cadastrar usu√°rio")
        print("2 - Selecionar usu√°rio e acessar conta")
        print("3 - Listar usu√°rios cadastrados")
        print("4 - Sair")

        opcao = input("Escolha uma op√ß√£o: ")

        if opcao == "1":
            cadastrar_usuario()
        elif opcao == "2":
            usuario = selecionar_usuario()
            if usuario:
                print(f"\n===üë§ BEM-VINDO AO BANCO {usuario.nome}===")
                menu_usuario(usuario)
        elif opcao == "3":
            listar_usuarios()
        elif opcao == "4":
            print("üëã Saindo... Obrigado por usar nosso sistema!")
            break
        else:
            print("‚ö†Ô∏è Op√ß√£o inv√°lida! Tente novamente.")

def menu_usuario(usuario):
    while True:
        print("\n=== üí≥ MENU CONTA CORRENTE ===")
        print("1 - criar conta")
        print("2 - Selecionar conta e acessar")
        print("3 - Listar contas cadastrados")
        print("4 - Retornar ao menu principal")

        opcao = input("Escolha uma op√ß√£o: ")

        if opcao == "1":
            cadastrar_conta()
        elif opcao == "2":
            conta = selecionar_conta()
            if conta:
                menu_conta(conta)
        elif opcao == "3":
            listar_contas()
        elif opcao == "4":
            print("üîô Retornando ao menu principal...")
            break
        else:
            print("‚ö†Ô∏è Op√ß√£o inv√°lida! Tente novamente.")


# Fun√ß√£o para interagir com a conta do usu√°rio
def menu_conta(conta):
    while True:
        print("\n=== üí≥ MENU CONTA ===")
        print("1Ô∏è‚É£ - Depositar")
        print("2Ô∏è‚É£ - Sacar")
        print("3Ô∏è‚É£ - Extrato")
        print("4Ô∏è‚É£ - Voltar ao menu Conta Corrente")

        opcao = input("Escolha uma op√ß√£o: ")

        if opcao == "1":
            valor = float(input("Digite o valor do dep√≥sito: "))
            conta.depositar(valor)
        elif opcao == "2":
            valor = float(input("Digite o valor do saque: "))
            conta.sacar(valor)
        elif opcao == "3":
            conta.extrato()
        elif opcao == "4":
            print("üîô Retornando ao menu principal...")
            break
        else:
            print("‚ö†Ô∏è Op√ß√£o inv√°lida! Tente novamente.")


# Iniciando o programa
if __name__ == "__main__":
    main()

